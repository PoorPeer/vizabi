script.
  var TITLE = "#{title}";
  var TOOL = "#{tool}";
  var DESCRIPTION = "#{description}";

  VIZABI_MODEL = {
    state: {},
    bind: {
      'ready': function(evt, vals) {
        updateURL();
        updateStateEditor(VIZ.getModel().state);
      },
      'persistentChange': function(evt, minModel) {
        updateURL(true, minModel); // force update
      }
    },
    ui: {
      buttons: #{chart_buttons || '[]'},
      buttons_expand: #{chart_buttons_expand || '[]'},
      dialogs: #{chart_dialogs || '[]'}
    }
  };

  VIZABI_MODEL.bind['change:state'] = function(evt, vals) {
      updateStateEditor(VIZ.getModel().state);
  };

  var playButton = document.getElementById("vzbp-btn-play");
  var playButtonIcon = playButton.querySelectorAll("i")[0];

  VIZABI_MODEL.bind['change:state.time.playing'] = function(evt, path) {
    var playing = evt.source;
    if (playing.value) {
      playButton.onclick = pause;
      playButton.setAttribute("data-tooltip", "Pause");
      removeClass(playButtonIcon, 'fa-play');
      addClass(playButtonIcon, 'fa-pause');
    } else {
      playButton.onclick = play;
      playButton.setAttribute("data-tooltip", "Play");
      removeClass(playButtonIcon, 'fa-pause');
      addClass(playButtonIcon, 'fa-play');
    }
  };

  VIZABI_MODEL.bind['change:state.time.record'] = function(evt, path) {
    var recButton = document.getElementById("vzbp-btn-record");
    var recButtonIcon = recButton.querySelectorAll("i")[0];
    var record = evt.source;
    if (record.value) {
      recButton.onclick = recstop;
      recButton.setAttribute("data-tooltip", "Stop");
      removeClass(recButtonIcon, 'fa-bullseye');
      addClass(recButtonIcon, 'fa-circle');
    } else {
      recButton.onclick = recstart;
      recButton.setAttribute("data-tooltip", "Record");
      removeClass(recButtonIcon, 'fa-circle');
      addClass(recButtonIcon, 'fa-bullseye');
    }
  };
 
  var langButton = document.getElementById("vzbp-btn-lang");

  VIZABI_MODEL.bind['change:language.id'] = function(evt, path) {
    var lang = evt.source;
    if (lang.value === "en") {
      langButton.onclick = function() { language('se'); };
      langButton.setAttribute("data-tooltip", "Set Lang: SE");
      langButton.setAttribute("data-next_lang", 'se');
    } else {
      langButton.onclick = function() { language('en'); };
      langButton.setAttribute("data-tooltip", "Set Lang: EN");
      langButton.setAttribute("data-next_lang", 'en');
    }
  };
  
  //WS reader integration
  var wsReader = new WSReader.WSReader().getReader();
  Vizabi.Reader.extend("waffle", wsReader);

  parseURL();
  
  var locationArray = window.location.href.split("/");
  var localUrl = locationArray.splice(0, locationArray.indexOf("preview")).join("/") + "/preview/";
  
  if("#{tool}"=="AgePyramid"){
    Vizabi._globals.ext_resources = {
      host: localUrl,
      preloadPath: 'data/zaf/',
      dataPath: 'data/zaf/waffles/'
    };

    VIZABI_MODEL.data = {
      reader: "csv",
      path: localUrl + 'data/zaf/waffles/' + "ddf--datapoints--population--by--year--age--population_group--education_attainment.csv",
      splash: false
    }   
    
  }else if("#{tool}"=="JOINTPyramidLine"){
    Vizabi._globals.ext_resources = {
      host: localUrl,
      preloadPath: 'data/zaf/',
      dataPath: 'data/zaf/waffles/'
    };

    VIZABI_MODEL.data = {
      reader: "csv",
      path: localUrl + 'data/zaf/waffles/' + "ddf--datapoints--population--by--year--age--education-gender-add-tfr.csv",
      splash: false
    }      
    
  }else if("#{tool}"=="JOINTCartogramLine"){
    Vizabi._globals.ext_resources = {
      host: localUrl,
      preloadPath: 'data/zaf/',
      dataPath: 'data/zaf/waffles/'
    };

    VIZABI_MODEL.data = {
      reader: "csv",
      path: localUrl + "data/zaf/waffles/ddf--datapoints--piped_water_percentage--electricity_lighting_percentage--by--time--geo-add-zaf.csv",
      splash: false
    }  
    
  }else if("#{tool}"=="Cartogram"){
    Vizabi._globals.ext_resources = {
      host: localUrl,
      preloadPath: 'data/zaf/',
      dataPath: 'data/zaf/waffles/',
      shapePath: localUrl + 'data/zaf/municipalities.json'
      //shapePath: localUrl + 'data/zaf/provinces.json'
    };

    VIZABI_MODEL.data = {
      reader: "csv",
      //path: localUrl + "data/zaf/waffles/ddf--datapoints--population--black_population--black_population_percentage--by--year--province.csv",
      //path: localUrl + "data/zaf/waffles/ddf--datapoints--population--black_population--black_population_percentage--by--year--municipality.csv",
      path: localUrl + "data/zaf/waffles/ddf--datapoints--piped_water_percentage--electricity_lighting_percentage--by--year--municipality.csv",
      splash: false
    }  
  }else{
  
    Vizabi._globals.ext_resources = {
      host: 'https://waffle-server-dev-new-ddf.gapminderdev.org',
      preloadPath: '/api/vizabi/',
      dataPath: '/api/ddf/',
      //translationPath: localUrl + "data/translation/en.json",
      //shapePath: localUrl + "data/mc_precomputed_shapes.json"
      //shapePath: localUrl + "data/world-50m.json"
    };
  
    //popbyage is an exception because it has no data on WS for age. need local data
    if("#{tool}"!=="PopByAge"){
      VIZABI_MODEL.data = {
        reader: "waffle",
        path: Vizabi._globals.ext_resources.host + Vizabi._globals.ext_resources.dataPath
      }
    }
  }

  VIZABI_INITIAL_MODEL = Vizabi.utils.deepClone(VIZABI_MODEL);
  Vizabi.utils.deepExtend(VIZABI_MODEL, URL.model);
  
  VIZ = Vizabi("#{tool}", placeholder, VIZABI_MODEL);